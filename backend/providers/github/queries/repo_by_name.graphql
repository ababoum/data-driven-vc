{
  repository(owner: "$owner", name: "$name") {
    ... RepoFragment
  }
}

fragment RepoFragment on Repository {
  id
  databaseId
  nameWithOwner
  description
  homepageUrl
  createdAt
  updatedAt
  pushedAt
  mentionableUsers {
    totalCount
  }
  languages(first: 1, orderBy: {direction: DESC, field: SIZE}) {
    edges {
      node {
        id
        name
      }
    }
  }
  hasIssuesEnabled
  hasProjectsEnabled
  hasWikiEnabled
  latestRelease {
    id
  }
  isArchived
  isFork
  stargazerCount
  watchers {
    totalCount
  }
  forkCount
  openIssues:issues(states: OPEN) {
    totalCount
  }
  closedIssues:issues(states: CLOSED) {
    totalCount
  }
  openPullRequests:pullRequests(states: OPEN) {
    totalCount
  }
  closedPullRequests:pullRequests(states: CLOSED) {
    totalCount
  }
  mergedPullRequests:pullRequests(states: MERGED) {
    totalCount
  }
  tags:refs(refPrefix: "refs/tags/") {
    totalCount
  }
  diskUsage
  defaultBranchRef {
    name
    target {
      ... on Commit {
        history(first:1) {
          totalCount
          edges {
            node {
              ... on Commit{
                committedDate
              }
            }
          }
        }
      }
    }
  }
  mirrorUrl
  licenseInfo {
    name
    key
    spdxId
  }
  repositoryTopics(first: 20) {
    edges {
      node {
        topic {
          id
          name
        }
      }
    }
  }
  owner {
    id
    login
    __typename
    ... on User {
      databaseId
      isSiteAdmin
    }
    ... on Organization {
      databaseId
    }
  }
  readme1: object(expression: "HEAD:Readme.md") {
    ... on Blob {
      text
    }
  }
  readme2: object(expression: "HEAD:readme.md") {
    ... on Blob {
      text
    }
  }
  readme3: object(expression: "HEAD:README.md") {
    ... on Blob {
      text
    }
  }
}